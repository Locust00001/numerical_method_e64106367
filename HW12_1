import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# %% 問題 1: 求解 Poisson 方程
print("--- Solving Problem 1: Poisson's Equation ---")

# 1. 參數設定
h = 0.1 * np.pi
k = 0.1 * np.pi
x_start, x_end = 0, np.pi
y_start, y_end = 0, np.pi / 2

# 建立網格點
x = np.arange(x_start, x_end + h, h)
y = np.arange(y_start, y_end + k, k)
Nx = len(x)
Ny = len(y)

# 內部節點的數量
Nx_internal = Nx - 2
Ny_internal = Ny - 2
N_unknowns = Nx_internal * Ny_internal

# 2. 初始化矩陣 A 和向量 b
A = np.zeros((N_unknowns, N_unknowns))
b = np.zeros(N_unknowns)

# f(x,y) = xy
def f(xi, yj):
    return xi * yj

# 3. 建立線性方程組 A*u = b
# 我們將 2D 網格 (i,j) 映射到 1D 向量索引 l = i + j * Nx_internal
for j in range(Ny_internal):  # y 方向的內部索引
    for i in range(Nx_internal):  # x 方向的內部索引
        l = i + j * Nx_internal

        # 取得實際的 (x,y) 座標
        xi = x[i + 1]
        yj = y[j + 1]

        # --- 填充 A 矩陣 (基於五點模板) ---
        # 對角線元素 (對應 -4*u_ij)
        A[l, l] = -4

        # 非對角線元素
        # u_{i-1, j}
        if i > 0:
            A[l, l - 1] = 1
        # u_{i+1, j}
        if i < Nx_internal - 1:
            A[l, l + 1] = 1
        # u_{i, j-1}
        if j > 0:
            A[l, l - Nx_internal] = 1
        # u_{i, j+1}
        if j < Ny_internal - 1:
            A[l, l + Nx_internal] = 1

        # --- 填充 b 向量 ---
        b[l] = h**2 * f(xi, yj)

        # 處理邊界條件 (將已知值移到右側)
        # 底部邊界 y=0, u(x,0) = cos(x)
        if j == 0:
            b[l] -= np.cos(xi)
        # 頂部邊界 y=pi/2, u(x, pi/2) = 0
        if j == Ny_internal - 1:
            b[l] -= 0 # u(xi, y_end)
        # 左側邊界 x=0, u(0,y) = cos(y)
        if i == 0:
            b[l] -= np.cos(yj)
        # 右側邊界 x=pi, u(pi,y) = -cos(y)
        if i == Nx_internal - 1:
            b[l] -= -np.cos(yj)

# 4. 求解線性方程組
u_internal_vec = np.linalg.solve(A, b)

# 5. 將解向量還原為 2D 網格並加上邊界
U = np.zeros((Ny, Nx))

# 填入邊界值
U[0, :] = np.cos(x)
U[-1, :] = 0
U[:, 0] = np.cos(y)
U[:, -1] = -np.cos(y)

# 填入內部解
U[1:-1, 1:-1] = u_internal_vec.reshape((Ny_internal, Nx_internal))

# 6. 繪圖
X, Y = np.meshgrid(x, y)
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_surface(X, Y, U, cmap='viridis', edgecolor='none')
ax.set_title("Problem 1: Solution to Poisson's Equation")
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('u(x,y)')
fig.colorbar(surf, shrink=0.5, aspect=5)
plt.show()
