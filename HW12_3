import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# %% 問題 3 (修正後): 求解極座標 Laplace 方程
print("\n--- Solving Problem 3 (Corrected): Laplace's Equation in Polar Coordinates ---")

# 1. 參數設定
r_start, r_end = 0.5, 1.0
theta_start, theta_end = 0, np.pi / 3

Nr_pts = 10
Ntheta_pts = 15

dr = (r_end - r_start) / (Nr_pts - 1)
dtheta = (theta_end - theta_start) / (Ntheta_pts - 1)

r = np.linspace(r_start, r_end, Nr_pts)
theta = np.linspace(theta_start, theta_end, Ntheta_pts)

a = (dr / dtheta)**2

# 內部節點數量
Nr_internal = Nr_pts - 2
Ntheta_internal = Ntheta_pts - 2
N_unknowns = Nr_internal * Ntheta_internal

# 2. 初始化 A 和 b
A = np.zeros((N_unknowns, N_unknowns))
b = np.zeros(N_unknowns)

# 3. 建立線性方程組
# 映射: l = i + j * Nr_internal, where i is r-index, j is theta-index
for j in range(Ntheta_internal):
    for i in range(Nr_internal):
        l = i + j * Nr_internal
        
        ri = r[i + 1]

        # 對角線元素
        A[l, l] = -2 * (ri**2 + a)

        # T_{i-1, j} (r-方向, 鄰居)
        if i > 0:
            A[l, l - 1] = ri**2 - (dr / 2) * ri
        
        # T_{i+1, j} (r+方向, 鄰居)
        if i < Nr_internal - 1:
            A[l, l + 1] = ri**2 + (dr / 2) * ri

        # T_{i, j-1} (theta-方向, 鄰居)
        if j > 0:
            A[l, l - Nr_internal] = a # Stride is Nr_internal
        
        # T_{i, j+1} (theta+方向, 鄰居) -  *** THIS IS THE CORRECTED LINE ***
        if j < Ntheta_internal - 1:
            A[l, l + Nr_internal] = a # Stride must be Nr_internal, not Ntheta_internal

        # 處理邊界條件 (移到 b 向量)
        if i == 0: # 內邊界 r = 1/2
            b[l] -= (ri**2 - (dr / 2) * ri) * 50
        if i == Nr_internal - 1: # 外邊界 r = 1
            b[l] -= (ri**2 + (dr / 2) * ri) * 100
        
        if j == 0: # 邊界 theta = 0
            b[l] -= a * 0
        if j == Ntheta_internal - 1: # 邊界 theta = pi/3
            b[l] -= a * 0

# 4. 求解
T_internal_vec = np.linalg.solve(A, b)

# 5. 組合完整解
T_sol = np.zeros((Ntheta_pts, Nr_pts))

# 邊界值
T_sol[:, 0] = 50
T_sol[:, -1] = 100
T_sol[0, :] = 0
T_sol[-1, :] = 0
# 修正角點，取邊界條件的平均值或其中一個
T_sol[0, 0] = 50 
T_sol[0, -1] = 100
T_sol[-1, 0] = 50
T_sol[-1, -1] = 100


# 內部值
T_sol[1:-1, 1:-1] = T_internal_vec.reshape((Ntheta_internal, Nr_internal))

# 6. 繪圖
R, Theta = np.meshgrid(r, theta)
X = R * np.cos(Theta)
Y = R * np.sin(Theta)

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_surface(X, Y, T_sol, cmap='hot', edgecolor='none')
ax.set_title("Problem 3: Solution to Laplace's Equation (Corrected)")
ax.set_xlabel('x = r cos(θ)')
ax.set_ylabel('y = r sin(θ)')
ax.set_zlabel('Temperature T')
fig.colorbar(surf)
plt.show()
