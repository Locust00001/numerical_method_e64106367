#include <stdio.h>
#include <stdlib.h> // For abs() with doubles, use fabs from math.h
#include <math.h>   // For fabs() and sqrt() (for norm if needed)

// 定義矩陣和向量的大小 (本題為 6x6)
#define N 6

// 函數：印出向量
void print_vector(double vec[N], const char* name, int iteration) {
    if (iteration == 0) {
        printf("%s: [", name);
    } else {
        printf("迭代 %d: %s = [", iteration, name);
    }
    for (int i = 0; i < N; i++) {
        printf("%10.6f", vec[i]);
        if (i < N - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

int main() {
    // --- 作業設定 ---
    // A_sym 矩陣 (對稱版本)
    double A[N][N] = {
        {4.0, -1.0,  0.0, -1.0,  0.0,  0.0},
        {-1.0, 4.0, -1.0,  0.0, -1.0,  0.0},
        {0.0, -1.0,  4.0,  0.0,  1.0, -1.0}, 
        {-1.0,  0.0,  0.0,  4.0, -1.0, -1.0}, 
        {0.0, -1.0,  0.0, -1.0,  4.0, -1.0},
        {0.0,  0.0, -1.0,  0.0, -1.0,  4.0}
    };

    // b 向量
    double b[N] = {0.0, -1.0, 9.0, 4.0, 8.0, 6.0};

    // 初始猜測 x^(0) 和下一次迭代的 x_new
    double x[N] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}; // 目前迭代的 x
    double x_new[N];                               // 計算下一次迭代的 x

    // 迭代次數
    int max_iterations = 10; // 你可以調整這個值
    double tolerance = 1e-6; // 收斂容忍度

    printf("=== 雅可比法求解 Ax = b ===\n");
    printf("A 矩陣:\n");
    for(int i=0; i<N; i++) {
        for(int j=0; j<N; j++) {
            printf("%5.1f ", A[i][j]);
        }
        printf("\n");
    }
    printf("b 向量: ");
    print_vector(b, "b", -1); // 用-1表示非迭代步驟的向量b
    printf("初始 x^(0): ");
    print_vector(x, "x", 0);
    printf("最大迭代次數: %d\n\n", max_iterations);


    // --- 雅可比迭代 ---
    for (int k = 0; k < max_iterations; k++) {
        for (int i = 0; i < N; i++) {
            double sum_ax = 0.0;
            for (int j = 0; j < N; j++) {
                if (i != j) {
                    sum_ax += A[i][j] * x[j]; // 使用的是前一次迭代的 x[j]
                }
            }
            x_new[i] = (b[i] - sum_ax) / A[i][i];
        }

        // 檢查收斂性 (可選，但建議)
        // 計算 ||x_new - x||_infinity
        double max_diff = 0.0;
        for (int i = 0; i < N; i++) {
            double diff = fabs(x_new[i] - x[i]);
            if (diff > max_diff) {
                max_diff = diff;
            }
        }

        // 更新 x 以進行下一次迭代
        for (int i = 0; i < N; i++) {
            x[i] = x_new[i];
        }

        // 印出當前迭代的結果
        print_vector(x, "x", k + 1);

        // 如果差異小於容忍度，則提前停止
        if (max_diff < tolerance) {
            printf("\n在 %d 次迭代後，差異小於容忍度 %.1e，判定為收斂。\n", k + 1, tolerance);
            break;
        }
        if (k == max_iterations - 1 && max_diff >= tolerance) {
            printf("\n達到最大迭代次數 %d，可能未完全收斂 (最大差異: %.2e)。\n", max_iterations, max_diff);
        }
    }

    printf("\n--- 雅可比法最終解 (近似值) ---\n");
    print_vector(x, "x_final", -1); // 用-1表示最終解

    return 0;
}
